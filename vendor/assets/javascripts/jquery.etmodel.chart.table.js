// Generated by CoffeeScript 1.3.3
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Table = (function(_super) {

    __extends(Table, _super);

    function Table(container, gqueries) {
      this.refresh = __bind(this.refresh, this);

      this.render = __bind(this.render, this);
      Table.__super__.constructor.call(this, container, gqueries);
    }

    Table.prototype.render = function(data, values) {
      this.start_year = 2010;
      this.end_year = data.scenario.end_year;
      this.table = d3.select(this.container).append('table').attr('class', 'etm-d3');
      this.thead = this.table.append('thead');
      this.tbody = this.table.append('tbody');
      this.thead.append('tr').selectAll('th').data([123, this.start_year, this.end_year]).enter().append('th').text(function(d) {
        return d;
      });
      this.rows = this.tbody.selectAll('tr.d3-row').data(values, function(d) {
        return d.key;
      }).enter().append('tr').attr('class', 'd3-row');
      this.rows.append('th').text(function(d) {
        return d.key;
      });
      this.rows.append('td').attr('class', 'present');
      this.rows.append('td').attr('class', 'future');
      return this.rendered = true;
    };

    Table.prototype.refresh = function(data) {
      var values;
      if (data == null) {
        data = {};
      }
      values = this.prepare_data(data);
      if (!this.rendered) {
        this.render(data, values);
      }
      this.rows.data(values, function(d) {
        return d.key;
      });
      this.rows.select('td.future').text(function(d) {
        return d.future;
      });
      return this.rows.select('td.present').text(function(d) {
        return d.present;
      });
    };

    Table.prototype.prepare_data = function(data) {
      var key, out, values, _ref;
      out = [];
      _ref = data.results;
      for (key in _ref) {
        values = _ref[key];
        out.push({
          key: key,
          present: values.present,
          future: values.future
        });
      }
      return out;
    };

    return Table;

  })(root.BaseChart);

}).call(this);
