// Generated by CoffeeScript 1.3.3
(function() {
  var ApiGateway, Etmodel, TEST_ETENGINE_URL, assert, root;

  root = typeof global !== "undefined" && global !== null ? global : window;

  TEST_ETENGINE_URL = 'http://localhost:3000';

  if (typeof require !== "undefined" && require !== null) {
    assert = require("assert");
    Etmodel = require('../vendor/assets/javascripts/jquery.etmodel.js').Etmodel;
    ApiGateway = require('../vendor/assets/javascripts/jquery.etmodel.js').ApiGateway;
  } else {
    Etmodel = root.Etmodel;
    ApiGateway = root.ApiGateway;
    assert = root.assert;
  }

  if (typeof $ !== "undefined" && $ !== null) {
    describe("$().etmodel()", function() {
      before(function() {
        this.etm = $('#scenario1').etmodel()[0];
        return this.etm.__call_api__ = function() {};
      });
      it("should assign default settings", function() {
        this.etm_default = $('#scenario-defaults').etmodel()[0];
        assert.equal('nl', this.etm_default.scenario.area_code);
        return assert.equal('2050', this.etm_default.scenario.end_year);
      });
      it("should overwrite settings", function() {
        assert.equal('de', this.etm.scenario.area_code);
        return assert.equal('2030', this.etm.scenario.end_year);
      });
      it("should find inputs and outputs", function() {
        assert.equal(2, this.etm.inputs.length);
        return assert.equal(2, this.etm.outputs.length);
      });
      return it("should assign api_path correctly", function() {
        var etm;
        etm = $('#scenario1').etmodel({
          api_path: 'http://beta.et-engine.com'
        })[0];
        return assert.equal('http://beta.et-engine.com/api/v3/', etm.api.path(''));
      });
    });
    describe('integration', function() {
      before(function() {});
      return it("when you change a slider it call before and afterLoading", function(done) {
        this.etm = $('#scenario1').etmodel({
          beforeLoading: (function() {
            return done();
          }),
          afterLoading: (function() {
            return done();
          })
        })[0];
        $(this.etm.inputs[0]).trigger('change');
        return done();
      });
    });
  }

  describe('ApiGateway', function() {
    var make_api;
    make_api = function(url) {
      return new ApiGateway({
        api_path: url
      });
    };
    describe('#__apply_settings__', function() {
      var api;
      api = make_api(TEST_ETENGINE_URL);
      api.__apply_settings__({
        id: 212
      });
      assert.equal(212, api.scenario_id);
      api.__apply_settings__({
        scenario_id: 213
      });
      assert.equal(213, api.scenario_id);
      api.__apply_settings__({
        scenario_id: 214,
        id: 215
      });
      return assert.equal(214, api.scenario_id);
    });
    describe('api_path', function() {
      it("should assign api_path correctly and catch commong mistakes", function() {
        assert.equal('http://beta.et-engine.com/api/v3/', make_api('http://beta.et-engine.com').path(''));
        assert.equal('http://etengine.dev/api/v3/', make_api('http://etengine.dev/').path(''));
        assert.equal('../relative_path/api/v3/', make_api('../relative_path/').path(''));
        return assert.equal('https://etengine.dev/api/v3/', make_api('https://etengine.dev/').path(''));
      });
      it("can only call setPath ones", function() {
        var api;
        api = new ApiGateway({
          api_path: 'http://beta.et-engine.com'
        });
        api.setPath('http://www.et-engine.com/');
        return assert.equal('http://beta.et-engine.com/api/v3/', api.path(''));
      });
      it("should flag isBeta if it's beta server", function() {
        assert.equal(true, make_api('http://beta.et-engine.com').isBeta);
        assert.equal(false, make_api('http://www.et-engine.com').isBeta);
        return assert.equal(false, make_api('http://etengine.dev').isBeta);
      });
      it("assigns default options to scenario", function() {
        var api;
        api = new ApiGateway();
        assert.equal(null, api.scenario_id);
        return assert.equal(false, api.opts.offline);
      });
      it("overwrites default options", function() {
        var api;
        api = new ApiGateway({
          scenario_id: 1234,
          offline: true
        });
        assert.equal(1234, api.scenario_id);
        return assert.equal(true, api.opts.offline);
      });
      return describe('cors support', function() {
        after(function() {
          return jQuery.support.cors = true;
        });
        it("always use proxy when cors = false", function() {
          jQuery.support.cors = false;
          assert.equal('/ete/api/v3/', new ApiGateway({
            api_path: 'ete.dev',
            offline: true
          }).path(''));
          return assert.equal('/ete/api/v3/', new ApiGateway({
            api_path: 'ete.dev',
            offline: false
          }).path(''));
        });
        return it("when cors = true use proxy only when offline", function() {
          jQuery.support.cors = true;
          assert.equal('/ete/api/v3/', new ApiGateway({
            api_path: 'ete.dev',
            offline: true
          }).path(''));
          return assert.notEqual('/ete/api/v3/', new ApiGateway({
            api_path: 'ete.dev',
            offline: false
          }).path(''));
        });
      });
    });
    return describe("API on " + TEST_ETENGINE_URL, function() {
      before(function() {
        return this.api = new ApiGateway({
          api_path: TEST_ETENGINE_URL
        });
      });
      it("#ensure_id() fetches new id", function(done) {
        var api;
        api = this.api;
        return api.ensure_id().done(function(id) {
          assert.equal(true, typeof id === 'number');
          assert.equal(id, api.scenario_id);
          return done();
        });
      });
      it("#update queries: ['foo_demand'])", function(done) {
        var _this = this;
        return this.api.ensure_id().done(function(id) {
          return _this.api.update({
            queries: ['foo_demand'],
            success: function(data) {
              assert.equal(true, typeof data.results.foo_demand.present === 'number');
              return done();
            }
          });
        });
      });
      it("#update settings: use_fce", function(done) {
        return this.api.update({
          settings: {
            use_fce: 1
          },
          queries: ['fce_enabled'],
          success: function(_arg) {
            var inputs, results, scenario;
            results = _arg.results, inputs = _arg.inputs, scenario = _arg.scenario;
            assert.equal(results.fce_enabled.future, 1);
            return done();
          }
        });
      });
      it("#update inputs: foo_demand with valid number updates future demand by that number", function(done) {
        return this.api.update({
          inputs: {
            'foo_demand': 3.0
          },
          queries: ['foo_demand'],
          success: function(data) {
            assert.ok(data);
            return done();
          }
        });
      });
      it("#update success: callback gets {results,inputs,settings}", function(done) {
        return this.api.update({
          inputs: {
            'foo_demand': 3.0
          },
          queries: ['foo_demand'],
          success: function(_arg) {
            var inputs, results, scenario;
            results = _arg.results, inputs = _arg.inputs, scenario = _arg.scenario;
            assert.ok(results);
            assert.ok(results.foo_demand);
            assert.ok(inputs);
            assert.ok(scenario);
            return done();
          }
        });
      });
      it("#update inputs: foo_demand with valid number updates future demand by that number", function(done) {
        return this.api.update({
          inputs: {
            'foo_demand': 3.0
          },
          queries: ['foo_demand'],
          success: function(data) {
            assert.ok(data);
            return done();
          }
        });
      });
      it("#update inputs: foo_demand with invalid number calls the supplied error callback", function(done) {
        return this.api.update({
          inputs: {
            'foo_demand': -1.0
          },
          error: function(data) {
            assert.ok(data);
            return done();
          },
          success: function(data) {
            assert.ok(false);
            return done();
          }
        });
      });
      it("#user_values returns values", function(done) {
        return this.api.user_values({
          success: function(inputs) {
            assert.ok(inputs);
            assert.ok(inputs.foo_demand.min < inputs.foo_demand.max);
            return done();
          }
        });
      });
      it("#changeScenario: from default end_year to 2030, also changes scenario_id", function(done) {
        var api, previous_scenario_id;
        api = this.api;
        previous_scenario_id = this.api.scenario_id;
        return api.changeScenario({
          attributes: {
            end_year: 2030
          },
          success: function(data) {
            assert.equal(4, arguments.length);
            assert.equal(2030, api.scenario.end_year);
            assert.equal(2030, data.scenario.end_year);
            assert.notEqual(previous_scenario_id, data.scenario.id);
            assert.notEqual(previous_scenario_id, api.scenario_id);
            return done();
          }
        });
      });
      it("#resetScenario: with a preset_scenario. Will reset all inputs.", function(done) {
        var api, previous_scenario_id;
        api = new ApiGateway({
          api_path: TEST_ETENGINE_URL,
          preset_scenario_id: 2999
        });
        previous_scenario_id = null;
        api.ensure_id().done(function(id) {
          return previous_scenario_id = api.scenario_id;
        });
        return api.user_values({
          success: function(data) {
            assert.equal(10, data.foo_demand.user);
            return api.resetScenario({
              success: function(data) {
                assert.equal(4, arguments.length);
                assert.ok(data.inputs);
                assert.ok(data.results);
                assert.equal(previous_scenario_id, data.scenario.id);
                return api.user_values({
                  success: function(data) {
                    assert.notEqual(10, data.foo_demand.user);
                    return done();
                  }
                });
              }
            });
          }
        });
      });
      return describe('error callbacks for', function() {
        before(function() {
          return this.api = new ApiGateway({
            api_path: TEST_ETENGINE_URL
          });
        });
        it("#user_values", function(done) {
          var _this = this;
          return this.api.ensure_id().done(function(id) {
            _this.api.scenario_id = void 0;
            return _this.api.user_values({
              error: function(data) {
                assert.ok(data);
                return done();
              }
            });
          });
        });
        return xit("#changeScenario", function(done) {
          var _this = this;
          return this.api.ensure_id().done(function(id) {
            _this.api.scenario_id = void 0;
            return _this.api.changeScenario({
              attributes: {
                end_year: 2000
              },
              success: function(data) {
                assert.ok(false);
                return done();
              },
              error: function(data) {
                assert.ok(true);
                return done();
              }
            });
          });
        });
      });
    });
  });

  describe('Etmodel.ResultFormatter', function() {
    var format_result, result;
    format_result = function(value, format) {
      return new Etmodel.ResultFormatter(value, format).value();
    };
    result = function(present, future) {
      return {
        present: present,
        future: future
      };
    };
    before(function() {
      return this.res = result(10, 15);
    });
    it("should round future value by default", function() {
      return assert.equal(2.1, format_result(result(0, 2.1234)));
    });
    it("should round", function() {
      assert.equal(1.2, format_result(1.234, 'round'));
      assert.equal(1.0, format_result(1.234, 'round:0'));
      assert.equal(1.2, format_result(1.234, 'round:1'));
      assert.equal(1.23, format_result(1.234, 'round:2'));
      return assert.equal(1230.0, format_result(1234.234, 'round:-1'));
    });
    it("should fetch present|future", function() {
      assert.equal(10, format_result(this.res, 'present'));
      return assert.equal(15, format_result(this.res, 'future'));
    });
    it("should calculate delta", function() {
      assert.equal((15 / 10) - 1, format_result(this.res, 'delta'));
      return assert.equal(0, format_result(result(0, 0), 'delta'));
    });
    return it("should chain format strings", function() {
      assert.equal(0.5, format_result(this.res, 'delta'));
      assert.equal(50, format_result(this.res, 'delta;percent'));
      return assert.equal(28.6, format_result(result(7, 9), 'delta;percent;round:1'));
    });
  });

}).call(this);
